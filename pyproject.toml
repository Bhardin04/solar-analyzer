[project]
name = "solar-analyzer"
version = "0.1.0"
description = "SunPower solar data monitoring and visualization application"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "fastapi>=0.109.0",
    "uvicorn[standard]>=0.27.0",
    "httpx>=0.26.0",
    "plotly>=5.18.0",
    "dash>=2.14.0",
    "pandas>=2.1.0",
    "sqlalchemy>=2.0.0",
    "aiosqlite>=0.19.0",
    "asyncpg>=0.29.0",
    "psycopg[binary]>=3.1.0",
    "alembic>=1.13.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.6",
    "greenlet>=3.0.0",
    "typer>=0.9.0",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    "psutil>=5.9.0",
    "websockets>=12.0",
]

[project.scripts]
solar-analyzer = "solar_analyzer.main:main"
solar-cli = "solar_analyzer.cli:app"

[tool.uv]
dev-dependencies = [
    "ruff>=0.1.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.26.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.0",
    "playwright>=1.40.0",
    "pytest-playwright>=0.4.0",
    "pytest-html>=4.1.0",
    "pytest-xdist>=3.5.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/solar_analyzer",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
    "--html=reports/pytest_report.html",
    "--self-contained-html",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "database: Tests that require database",
    "external_api: Tests that call external APIs",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
    "*/alembic/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
